package com.okcoin.dapp.bundler.rest.api.resp;


import com.okcoin.dapp.bundler.infra.chain.web3j.resp.TransactionReceiptCommon;
import com.okcoin.dapp.bundler.pool.domain.event.UserOperationEvent;
import lombok.Data;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.utils.Numeric;

import java.math.BigInteger;
import java.util.List;

@Data
public class UserOperationReceiptVO {

    // The hash of the UserOperation
    private String userOpHash;
    // The contract account address
    private String sender;
    // nonce of the UserOperation
    private String nonce;
    // The actual amount paid for this UserOperation
    private BigInteger actualGasCost;
    // The total gas used by this UserOperation
    private BigInteger actualGasUsed;
    // Boolean value indicating if the execution completed without revert
    private boolean success;

    // TODO YUKINO 2023/11/1: revertReason

    // logs generated by this UserOperation only
    private List<Log> logs;
    // The TransactionReceipt object for the entire bundle.
    private TransactionReceiptCommon receipt;

    public static UserOperationReceiptVO dealUserOperationReceiptVo(TransactionReceiptCommon receipt, String opHash,
                                                                    List<Log> logs) {
        UserOperationEvent event = new UserOperationEvent(logs.remove(logs.size() - 1));
        UserOperationReceiptVO receiptVO = new UserOperationReceiptVO();
        receiptVO.setUserOpHash(opHash);
        receiptVO.setSender(event.getSender());
        receiptVO.setNonce(Numeric.encodeQuantity(event.getNonce()));
        receiptVO.setActualGasCost(event.getActualGasCost());
        receiptVO.setActualGasUsed(event.getActualGasUsed());
        receiptVO.setLogs(logs);
        receiptVO.setReceipt(receipt);
        receiptVO.setSuccess(event.isSuccess());
        return receiptVO;
    }
}
